version: 2
jobs:
  build:
    environment:
      SBT_VERSION: 1.4.7
      IMAGE_NAME: johnny4nrhl/scala-foo-vault
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:8-jdk
    # Specify service dependencies here is necessary
    # CircleCI maintains a library of pre-built images

    working_directory: ~/scala-foo

    steps:
      - run: echo 'export ARTIFACT_BUILD=$CIRCLE_PROJECT_REPONAME-$CIRCLE_BUILD_NUM.zip' >> $BASH_ENV
      - checkout
      - restore_cache:
          # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
#          key: sbt-cache
          keys:
            - v1-dependencies-{{ checksum "build.sbt" }}
              # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: Compile Test
          command: cat /dev/null | sbt test:compile
      - run:
          name: Compile scala-foo dist package
          command: cat /dev/null | sbt clean update dist
      - store_artifacts: # for display in Artifacts:  https://circleci.com/docs/2.0/artifacts/
          path: target/universal/foo-0.1.0-SNAPSHOT.zip
          destination: samplescala
      - save_cache:
#          key: sbt-cache
          key: v1-dependencies--{{ checksum "build.sbt" }}
          paths:
            - "~/.ivy2/cache"
            - "~/.sbt"
            - "~/.m2"
      - run:
          name: Run Test
          command: cat /dev/null | sbt test:test
      - setup_remote_docker
      - run:
          name: Build Docker image
          command: docker build -t $IMAGE_NAME:latest .
#      - deploy:
#          command: |
#            mv target/universal/samplescala.zip $CIRCLE_ARTIFACTS/$ARTIFACT_BUILD
#            aws s3 cp $CIRCLE_ARTIFACTS/$ARTIFACT_BUILD s3://samplescala.blogs/builds/ --metadata {\"git_sha1\":\"$CIRCLE_SHA1\"}
  publish-latest:
    environment:
      IMAGE_NAME: scala-foo-vault
    docker:
      - image: circleci/buildpack-deps:stretch
    steps:
      - setup_remote_docker
      - run:
          name: Publish Docker Image to Docker Hub
          command: |
            echo "$DOCKERHUB_PWD" | docker login -u "$DOCKERHUB_USER" --password-stdin
            docker push $IMAGE_NAME:latest
workflows:
  version: 2
  build-master:
    jobs:
      - build:
          filters:
            branches:
              only: master
      - publish-latest:
          context: foo-context
          requires:
            - build
          filters:
            branches:
              only: master
